'scopeName': 'text.html.expressionengine'
'fileTypes': [
  'html'
]
'foldingStartMarker': '(^\\s*/\\*|(\\{|\\[|\\()\\s*$)'
'foldingStopMarker': '(\\*/|^\\s*(\\}|\\]|\\)))'
'name': 'ExpressionEngine'
'patterns': [
  {
    'include': 'text.html.basic'
  }
  {
    'captures': {
      '1':
        'name': 'entity.ee.tag.open'
      '2':
        'name': 'entity.ee.tag.module'
      '3':
        'name': 'entity.ee.tag.method'
    }
    'match': '(exp):(\\w*)(:(\\w*))?'
  }
  {
    'include': '#components'
  }
]
'repository': {
  'components': {
    'patterns': [
      {
        'include': '#conditional'
      }
      {
        'include': '#double-quote'
      }
      {
        'include': '#single-quote'
      }
      {
        'include': '#comment'
      }
      {
        'include': '#params'
      }
      {
        'include': '#variable'
      }
      {
        'include': '#variable-pair'
      }
    ]
  }
  'comment': {
    'begin': '\\{!--'
    'end': '--\\}'
    'name': 'comment.block.ee'
  }
  'conditional': {
    'patterns': [
      {
        'match': '{\/(if)}',
        'captures': {
          '1':
            'name': 'keyword.ee.other'
        }
      }
      {
        'begin': '{(if)',
        'beginCaptures': {
          '1':
            'name': 'keyword.ee.other'
        }
        'end': '}$'
        'endCaptures': {
          '1':
            'name': 'keyword.ee.other'
        }
        'patterns': [
          {
            'include': '#components'
          }
          {
            'include': '#variable'
          }
          {
            'match': '\\w'
            'name': 'variable.parameter.ee'
          }
        ]
      }
    ]
  }
  'params': {
    'beginCaptures': {
      '1':
        'name': 'variable.parameter.ee'
    }
    'begin': '(\\w+)='
    'patterns': [
      {
        'name': 'string.ee.quoted.single'
        'match': '\'{?(\\w|:)+}?\''
      }
      {
        'name': 'string.ee.quoted.double'
        'match': '\"{?(\\w|:)+}?\"'
      }
    ]
    'end': '}'
  }
  'variable': {
    'match': '({(\\w+)})',
    'captures': {
      '1':
        'name': 'variable.other.ee'
    }
  },
  'single-quote': {
    'name': 'string.ee.quoted.double'
    'match': '\'\\S+\''
  }
  'double-quote': {
    'name': 'string.ee.quoted.double'
    'match': '"\\S+"'
  }
  'variable-pair': {
    'match': '{\/?(?!exp)((\\w|:)+)'
    'captures': {
      '1':
        'name': 'variable.other.ee'
    }
  }
}